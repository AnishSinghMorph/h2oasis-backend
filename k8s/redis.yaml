# Redis Deployment and Service
# This creates a Redis cache instance in Kubernetes

---
# Deployment: Manages the Redis pods (containers)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: h2oasis
  labels:
    app: redis
spec:
  replicas: 1  # Run 1 Redis instance (can scale later)
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine  # Same Redis image from Docker Compose
        ports:
        - containerPort: 6379  # Redis default port
          name: redis
        resources:
          # Resource limits to prevent Redis from using too much
          limits:
            memory: "256Mi"
            cpu: "500m"
          requests:
            memory: "128Mi"
            cpu: "250m"
        livenessProbe:
          # Kubernetes checks if Redis is alive
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          # Kubernetes checks if Redis is ready to accept connections
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Service: Makes Redis accessible to other pods by name "redis"
# This is how your backend will connect: redis://redis:6379
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: h2oasis
  labels:
    app: redis
spec:
  type: ClusterIP  # Internal service (only accessible within cluster)
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis  # Route traffic to pods with label app=redis
